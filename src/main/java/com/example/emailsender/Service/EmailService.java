package com.example.emailsender.Service;



import com.example.emailsender.Entity.EmailEntity;
import com.example.emailsender.Error.ApplicationException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.MailSendException;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@Slf4j





public class EmailService {

    private final JavaMailSender mailSender;

    private static final List<String> BAD_WORDS = List.of(
            "–¥—É—Ä–∞–∫", "–∏–¥–∏–æ—Ç", "—Ç—É–ø–æ–π", "–º–∞—Ç1", "–º–∞—Ç2", "–º–∞—Ç3"
    );

    @Autowired
    public EmailService(JavaMailSender mailSender) {
        this.mailSender = mailSender;
    }



    public void SendEmail(EmailEntity emailEntity) {

        if (emailEntity == null) {
            throw new IllegalArgumentException("–ó–∞—è–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–∞");
        }

        // üßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞
        if (containsBadWords(emailEntity)) {
            throw new IllegalArgumentException("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞");
        }

        try {
            SimpleMailMessage msg = new SimpleMailMessage();
            msg.setTo("client@example.com");
            msg.setSubject("–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç " + emailEntity.getName());
            msg.setText(emailEntity.toString());

            mailSender.send(msg);
            log.info("‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {}", "client@example.com");

        } catch (MailSendException e) {
            log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ: {}", e.getMessage());
            throw new ApplicationException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞", e);
        } catch (Exception e) {
            log.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞", e);
            throw new ApplicationException("–û—à–∏–±–∫–∞ –ø–æ—á—Ç—ã", e);
        }
    }

    private boolean containsBadWords(EmailEntity emailEntity) {
        String text = (emailEntity.getMessage() + " " + emailEntity.getName()).toLowerCase();
        return BAD_WORDS.stream().anyMatch(text::contains);
    }
}
